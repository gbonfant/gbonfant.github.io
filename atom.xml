<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Gus Bonfant]]></title>
  <link href="http://www.gbonfant.com/atom.xml" rel="self"/>
  <link href="http://www.gbonfant.com/"/>
  <updated>2014-07-18T10:34:58+02:00</updated>
  <id>http://www.gbonfant.com/</id>
  <author>
    <name><![CDATA[Gus Bonfant]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Speed up performance of iTerm and Vim]]></title>
    <link href="http://www.gbonfant.com/blog/speed-up-performance-of-iterm-and-vim/"/>
    <updated>2014-07-16T15:06:30+02:00</updated>
    <id>http://www.gbonfant.com/blog/speed-up-performance-of-iterm-and-vim</id>
    <content type="html"><![CDATA[<p>Over a year ago I switched to iTerm2 after several years of happily using Terminal.app on Mac OS X, and although I&rsquo;m more than happy with the change I&rsquo;ve noticed that in the last weeks the overall responsiveness of my terminal has declined. Initially I thought zsh and particularly <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> were at fault, and thus I switched to <a href="http://fishshell.com">fish</a>, my shell was definitely faster, and after getting used to the non POSIX world of fish I even became more productive. However, it didn&rsquo;t actually solve the issues with the terminal itself, and after moving my Vim environment to the shell I experienced horrible delays in the rendering response and startup of iTerm.</p>

<h2>How I solved it.</h2>

<p>First of all I tackled the slow starting time on iTerm by deleting the system logs OS X keeps in <code>/var/log/asl</code>. After some years of usage without any clean os install they just piled up.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo rm /var/log/asl/*.asl
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>You might not want to delete all the files in the asl directory as it also contains other log files unrelated to the shell.</p></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Responding to scope changes with controller as syntax]]></title>
    <link href="http://www.gbonfant.com/blog/responding-to-scope-changes-with-controller-as-syntax/"/>
    <updated>2014-07-11T14:51:50+02:00</updated>
    <id>http://www.gbonfant.com/blog/responding-to-scope-changes-with-controller-as-syntax</id>
    <content type="html"><![CDATA[<p>Before AngularJS 1.2 we used to bind our data models to the <code>$scope</code> object in a controller. I find this confusing as the use  of <code>scope</code> across my angular code looked like some dark magic.</p>

<p>Starting on <a href="https://github.com/angular/angular.js/blob/master/CHANGELOG.md#115-triangle-squarification-2013-05-22">1.1.5</a> the <em>controller as</em> syntax was introduced, this allowed us to declare our controllers as plain javascript objects, such as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;PersonController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;James&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>I liked this approach but it introduced an annoyance: watching scope changes didn&rsquo;t work anymore.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;PersonController&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="s1">&#39;NotificationFactory&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">NotificationFactory</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span>          <span class="o">=</span> <span class="s1">&#39;James&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">notifications</span> <span class="o">=</span> <span class="nx">NotificationFactory</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="s1">&#39;notifications&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newValue</span><span class="p">,</span> <span class="nx">oldValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;This does not work&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure>




]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Execute a function on ng-repeat done]]></title>
    <link href="http://www.gbonfant.com/blog/execute-function-on-ng-repeat-done/"/>
    <updated>2013-08-25T21:58:05+02:00</updated>
    <id>http://www.gbonfant.com/blog/execute-function-on-ng-repeat-done</id>
    <content type="html"><![CDATA[<p>ngRepeat is one of Angular&rsquo;s most powerful directives and in most cases <em>it just works</em>, however there are times when I find myself wanting to update the DOM or execute a function as soon as the directive has finished its job.</p>

<p>Thanks to Angular&rsquo;s <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$destroy">$destroy()</a> I can create a custom directive to accomplish such effect.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;repeatDone&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">element</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;$destroy&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">scope</span><span class="p">.</span><span class="nx">$last</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">scope</span><span class="p">.</span><span class="nx">$eval</span><span class="p">(</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">repeatDone</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>By simply calling our directive along with <code>ng-repeat</code> we can then execute our function as soon as the iteration is finished.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-repeat=</span><span class="s">&quot;item in model.items&quot;</span> <span class="na">repeat-done=</span><span class="s">&quot;foo()&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set-up log level for specific exceptions]]></title>
    <link href="http://www.gbonfant.com/blog/set-up-log-level-specific-exceptions/"/>
    <updated>2013-08-19T21:08:49+02:00</updated>
    <id>http://www.gbonfant.com/blog/set-up-log-level-specific-exceptions</id>
    <content type="html"><![CDATA[<p>It seems to me that in the Rails world logging is an afterthought, something that can be easily taken care of via 3rd party services, not surprising considering how inexpensive, robust and easy to setup they are.</p>

<p>However, if you are manually keeping track of your logs with something like <a href="http://graylog2.org">graylog</a> finding any useful, straightforward information about logging in Rails can be daunting. So without any straightforward answer as to how to set a warn level for all those pesky 404 errors that were polluting our logs I decided to peek into Rails&#8217; internals. <a href="http://api.rubyonrails.org/classes/ActionDispatch/DebugExceptions.html">ActionDispatch::DebugExceptions</a> is a simple piece of middleware in charge of logging exceptions, upon further inspection I stumbled upon <code>log_error</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">log_error</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">wrapper</span><span class="p">)</span>
</span><span class='line'>  <span class="n">logger</span> <span class="o">=</span> <span class="n">logger</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="k">unless</span> <span class="n">logger</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">exception</span> <span class="o">=</span> <span class="n">wrapper</span><span class="o">.</span><span class="n">exception</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">trace</span> <span class="o">=</span> <span class="n">wrapper</span><span class="o">.</span><span class="n">application_trace</span>
</span><span class='line'>  <span class="n">trace</span> <span class="o">=</span> <span class="n">wrapper</span><span class="o">.</span><span class="n">framework_trace</span> <span class="k">if</span> <span class="n">trace</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Deprecation</span><span class="o">.</span><span class="n">silence</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># string manipulation code ...</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">fatal</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="se">\n\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It looks like <code>log_error</code> is logging every exception as fatal, this is exactly the behaviour I want to modify.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ActionDispatch</span><span class="o">::</span><span class="no">DebugExceptions</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">log_error</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">wrapper</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="n">wrapper</span><span class="o">.</span><span class="n">exception</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">RoutingError</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I could as well override the method and add my own logic to it, for instance if I wanted to add a conditional, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">log_error</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">wrapper</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">exception</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">RoutingError</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="se">\n\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">fatal</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="se">\n\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Middleware code is a joy to read and a great reminder that our code should be simple, lean and understandable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deleting nested hashes in Ruby]]></title>
    <link href="http://www.gbonfant.com/blog/deleting-nested-hashes-in-ruby/"/>
    <updated>2013-06-26T20:16:31+02:00</updated>
    <id>http://www.gbonfant.com/blog/deleting-nested-hashes-in-ruby</id>
    <content type="html"><![CDATA[<p>I wanted to expose a method for performing a relatively common problem I was facing: removing nested items in a data structure. I tried to aproach the problem by naively duplicating the object and deleting any nested hash.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Hash</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">except_nested_key</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">dup</span><span class="o">.</span><span class="n">except_nested_key!</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">except_nested_key!</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="n">each</span> <span class="p">{</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="n">v</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="k">if</span> <span class="n">v</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">Hash</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This implementation exposes a few flaws. To begin with, both <code>dup</code> and <code>clone</code> make shallow copies of the given object, which means our nested hashes are just references to the original object, because of this, unless the nested hashes in the original object were frozen both methods will mutate the original object state! <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>Fortunately we can achieve a deep copy of our original object and preserve its integrity using <a href="http://ruby-doc.org/core-1.9.3/Marshal.html">Marshal</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Hash</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">except_nested_key</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="n">copy</span> <span class="o">=</span> <span class="no">Marshal</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="no">Marshal</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="nb">self</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">copy</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span><span class="o">|</span> <span class="n">v</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="k">if</span> <span class="n">v</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">Hash</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><em>Object-oriented programming makes code understandable by encapsulating moving parts. Functional programming makes code understandable by minimizing moving parts.</em> — Michael Feathers<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Assigning date attributes without ActiveRecord]]></title>
    <link href="http://www.gbonfant.com/blog/assigning-date-attributes-without-active-record/"/>
    <updated>2013-05-14T16:13:26+02:00</updated>
    <id>http://www.gbonfant.com/blog/assigning-date-attributes-without-active-record</id>
    <content type="html"><![CDATA[<p>When straying away from &ldquo;the rails path&rdquo; we may find ourselves missing some nifty functionality the Rails modules provide us.</p>

<p>The most ubiquitous of those, ActiveRecord, is without a doubt a behemont of nifty functionalities, in this case seemingly instantiating and assigning date object to our models date attributes is a feature we give for granted.</p>

<p>However, if you are building Rails applications without ActiveRecord you might find yourself in a predicament when submitting a form with dates.</p>

<p>Assuming the following class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="o">&lt;</span> <span class="no">BaseModel</span>
</span><span class='line'>  <span class="c1"># For the sake of simplicity, BaseModel will add all the boilerplate</span>
</span><span class='line'>  <span class="c1"># needed for making our class behave like an AR model class.</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:birth_date</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">attributes</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When submitting a form with the following parameters, <code>name</code> will be automatically assigned but <code>birth_date</code> won&rsquo;t.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;James Bond&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;birth_date(3i)&quot;</span><span class="o">:</span> <span class="s2">&quot;11&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;birth_date(2i)&quot;</span><span class="o">:</span> <span class="s2">&quot;11&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;birth_date(1i)&quot;</span><span class="o">:</span> <span class="s2">&quot;1920&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




]]></content>
  </entry>
  
</feed>
